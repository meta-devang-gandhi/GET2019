                 NORMALIZATION

Normalization is the process of organizing the data in the database.
Normalization is used to minimize the redundancy from a relation or set of relations. It is also used to eliminate the undesirable characteristics like Insertion, Update and Deletion Anomalies.
Normalization divides the larger table into the smaller table and links them using relationship.
The normal form is used to reduce redundancy from the database table.

Update anomalies ? If data items are scattered and are not linked to each other properly, then it could lead to strange situations. For example, when we try to update one data item having its copies scattered over several places, a few instances get updated properly while a few others are left with old values. Such instances leave the database in an inconsistent state.

Deletion anomalies ? We tried to delete a record, but parts of it was left undeleted because of unawareness, the data is also saved somewhere else.

Insert anomalies ? We tried to insert data in a record that does not exist at all.


TYPE OF NORMALIZATION 

1. 1NF
2. 2NF
3. 3NF
4. BCNF


1. 1NF

A relation is in 1NF if it contains an atomic value.

 

We re-arrange the relation (table) as below, to convert it to First Normal Form

 


2. 2NF

A relation will be in 2NF if it is in 1NF and all non-key attributes are fully functional dependent on the primary key.

Functional Dependency

Functional dependency (FD) is a set of constraints between two attributes in a relation. Functional dependency says that if two tuples have same values for attributes A1, A2,..., An, then those two tuples must have to have same values for attributes B1, B2, ..., Bn.

Functional dependency is represented by an arrow sign (?) that is, X?Y, where X functionally determines Y. The left-hand side attributes determine the values of attributes on the right-hand side.

 
  
We see here in Student_Project relation that the prime key attributes are Stu_ID and Proj_ID. According to the rule, non-key attributes, i.e. Stu_Name and Proj_Name must be dependent upon both and not on any of the prime key attribute individually. But we find that Stu_Name can be identified by Stu_ID and Proj_Name can be identified by Proj_ID independently. This is called partial dependency, which is not allowed in Second Normal Form.


3. 3NF

A relation will be in 3NF if it is in 2NF and no transition dependency exists.

Transitive dependency 
If A->B and B->C are two FDs then A->C is called transitive dependency

 
 
We find that in the above Student_detail relation, Stu_ID is the key and only prime key attribute. We find that City can be identified by Stu_ID as well as Zip itself. Neither Zip is a superkey nor is City a prime attribute. Additionally, Stu_ID ? Zip ? City, so there exists transitive dependency.

4. BCNF
	